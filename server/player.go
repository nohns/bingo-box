package bingo

import (
	"context"
	"time"
)

type PlayerRepository interface {
	Save(ctx context.Context, player *Player) error
	Get(ctx context.Context, playerId string) (*Player, error)
}

type PlayerService struct {
	playerRepo PlayerRepository
}

func (ps *PlayerService) Get(ctx context.Context, playerId string) (*Player, error) {
	player, err := ps.playerRepo.Get(ctx, playerId)
	if err != nil {
		return nil, err
	}

	return player, nil
}

func NewPlayerService(playerRepo PlayerRepository) *PlayerService {
	return &PlayerService{
		playerRepo: playerRepo,
	}
}

// Entity
type Player struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`

	// Invitation player has joined by
	InvitationID string      `json:"invitationId,omitempty"`
	Invitation   *Invitation `json:"invitation"`

	// Cards generated by user
	Cards []Card `json:"cards"`

	UpdatedAt time.Time `json:"updatedAt"`
	CreatedAt time.Time `json:"createdAt"`
}

func (p *Player) Validate() error {
	return nil
}

func NewPlayer(name, email string, cardAmount int) *Player {
	return &Player{}
}
